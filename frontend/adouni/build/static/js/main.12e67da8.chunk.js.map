{"version":3,"sources":["components/auth_page.jsx","components/home.jsx","utils.jsx","components/routing.jsx","App.js","serviceWorker.js","index.js"],"names":["AuthPage","props","errortext","useContext","CnxContext","dispatch","conn","useState","code","setCode","error","setError","className","onSubmit","event","preventDefault","axios","post","then","res","data","token","localStorage","setItem","history","push","catch","type","name","onChange","target","value","Home","onClick","href","PrivateRoute","Component","component","rest","useEffect","key","getItem","get","headers","Authorization","console","log","status","removeItem","render","to","Routes","exact","path","React","createContext","initialState","reducer","state","action","Error","App","useReducer","Provider","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"+SA0CeA,MArCf,SAAkBC,GAAQ,IAOpBC,EAPmB,EAEGC,qBAAWC,GAAxBC,GAFU,EAEhBC,KAFgB,EAEVD,UAFU,EAICE,mBAAS,IAJV,mBAIhBC,EAJgB,KAIVC,EAJU,OAKGF,oBAAS,GALZ,mBAKhBG,EALgB,KAKTC,EALS,KAyBvB,OAjBGD,IACCR,EAAY,+CAiBZ,yBAAKU,UAAU,iBACX,0BAAMC,SAfd,SAAmBC,GACfA,EAAMC,iBACNC,IAAMC,KAAK,yCAA0C,CAACT,KAAMA,IACvDU,MAAK,SAAAC,GACAA,EAAIC,KAAKC,QACXC,aAAaC,QAAQ,QAASJ,EAAIC,KAAKC,OACvChB,EAAS,WACTJ,EAAMuB,QAAQC,KAAK,SAGtBC,OAAO,SAAAhB,GAAWC,GAAS,QAMxB,+CACA,2BAAOgB,KAAK,OAAOC,KAAK,OAAOC,SAAU,SAACf,GAAWL,EAAQK,EAAMgB,OAAOC,UAC1E,2BAAOJ,KAAK,WACXzB,KCfA8B,MAjBf,SAAc/B,GAAQ,IAAD,EAEQE,qBAAWC,GAAxBC,GAFK,EAEXC,KAFW,EAELD,UACd,OACI,6BACI,yBAAKO,UAAU,iBACX,4BACI,wBAAIqB,QAAS,WAAO5B,EAAS,gBAA7B,IAA8C,uBAAG6B,KAAK,IAAR,iBAGtD,yBAAKtB,UAAU,iBACX,kD,QCLRuB,EAAe,SAAC,GAAqC,IAAzBC,EAAwB,EAAnCC,UAAyBC,EAAU,+BAC3BnC,qBAAWC,GAA9BE,EAD8C,EAC9CA,KAAMD,EADwC,EACxCA,SAed,OAdAkC,qBAAU,WACR,GAAIjC,EAAK,CACH,IAAIkC,EAAMlB,aAAamB,QAAQ,SAC/BzB,IAAM0B,IAAI,6CAA+C,CAAEC,QAAS,CAAEC,cAAe,SAAUJ,KAC5FtB,MAAK,SAAAC,GACI0B,QAAQC,IAAI3B,EAAI4B,WAErBrB,OAAM,SAAUhB,GACXY,aAAa0B,WAAW,SACxB3C,EAAS,qBAMzB,kBAAC,IAAD,iBAAWiC,EAAX,CAAiBW,OAAQ,SAAAhD,GAAK,OACxBK,EACA,kBAAC8B,EAAcnC,GACf,kBAAC,IAAD,CAAUiD,GAAG,2BClBZ,SAASC,EAAOlD,GAC7B,OACE,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOmD,OAAK,EAACC,KAAK,oBAAoBhB,UAAWrC,IACjD,kBAAC,EAAD,CAAcqD,KAAK,IAAIhB,UAAWL,MCZvC,IAAM5B,EAAakD,IAAMC,gBAG1BC,EAAelC,aAAamB,QAAQ,SACpCgB,EAAU,SAACC,EAAOC,GACpB,OAAQA,GACJ,IAAK,UAAW,OAAO,EACvB,IAAK,aAED,OADArC,aAAa0B,WAAW,UACjB,EACX,QAAS,MAAM,IAAIY,MAAM,uBAelBC,MAVf,WAAgB,IAAD,EACYC,qBAAWL,EAASD,GADhC,mBACNlD,EADM,KACAD,EADA,KAEb,OACE,6BACI,kBAACD,EAAW2D,SAAZ,CAAqBhC,MAAO,CAAEzB,OAAMD,aAChC,kBAAC8C,EAAD,SCbQa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASpB,OACP,kBAAC,IAAMqB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzD,MAAK,SAAA0D,GACJA,EAAaC,gBAEdnD,OAAM,SAAAhB,GACLmC,QAAQnC,MAAMA,EAAMoE,c","file":"static/js/main.12e67da8.chunk.js","sourcesContent":["import React,  {useState, useContext} from 'react';\r\nimport './style/debug.css';\r\nimport axios from 'axios';\r\nimport {CnxContext} from '../App.js';\r\n\r\nfunction AuthPage(props) {\r\n\r\n  const {conn, dispatch } = useContext(CnxContext);\r\n\r\n  const [code, setCode] = useState(\"\");\r\n  const [error, setError] = useState(false);\r\n\r\n  var errortext;\r\n  if(error){\r\n      errortext = <p> code invalide </p>\r\n  }\r\n\r\n  function submition(event){\r\n      event.preventDefault();\r\n      axios.post('http://51.178.84.176:8081/user/ptoken/', {code: code})\r\n          .then(res => {\r\n            if (res.data.token){\r\n              localStorage.setItem('token', res.data.token);\r\n              dispatch(\"connect\");\r\n              props.history.push(\"/\");\r\n            }\r\n        })\r\n          .catch( error => { setError(true)})\r\n      }\r\n\r\n  return (\r\n      <div className=\"debugbounding\">\r\n          <form onSubmit={submition}>\r\n              <p>Enter your code:</p>\r\n              <input type='text' name='code' onChange={(event) => {setCode(event.target.value)}}/>\r\n              <input type='submit' />\r\n              {errortext}\r\n          </form>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default AuthPage;\r\n","import React, {useContext} from \"react\";\r\nimport {CnxContext} from '../App.js'\r\n\r\n\r\nfunction Home(props) {\r\n\r\n  const { conn, dispatch } = useContext(CnxContext);\r\n  return (\r\n      <div>\r\n          <div className=\"debugbounding\">\r\n              <ul>\r\n                  <li onClick={() => {dispatch(\"disconnect\")}}> <a href=\"\">disconnect</a></li>\r\n              </ul>\r\n          </div>\r\n          <div className=\"debugbounding\">\r\n              <h3>Coming soon ...</h3>\r\n          </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React, {useContext, useEffect} from \"react\";\r\nimport {\r\n  Route,\r\n  Redirect\r\n} from \"react-router-dom\";\r\nimport {CnxContext} from './App.js'\r\nimport axios from 'axios';\r\n\r\n\r\n// authentification\r\nconst PrivateRoute = ({component: Component, ...rest}) => {\r\n    const { conn, dispatch } = useContext(CnxContext);\r\n    useEffect(() => {\r\n      if (conn){\r\n            var key = localStorage.getItem('token');\r\n            axios.get(\"http://51.178.84.176:8081/user/checktoken/\",  { headers: { Authorization: 'token '+ key }})\r\n              .then(res => {\r\n                        console.log(res.status)\r\n                  })\r\n                  .catch(function (error) {\r\n                        localStorage.removeItem('token');\r\n                        dispatch('disconnect')\r\n          })\r\n            }\r\n        });\r\n\r\n    return (\r\n        <Route {...rest} render={props => (\r\n              conn?\r\n              <Component {...props} />\r\n            : <Redirect to=\"/authentification\" />\r\n        )} />\r\n    );\r\n};\r\n\r\nexport {PrivateRoute}\r\n","import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport AuthPage from './auth_page.jsx';\r\nimport Home from './home.jsx'\r\nimport {PrivateRoute} from '../utils.jsx'\r\n\r\n\r\n\r\nexport default function Routes(props) {\r\n  return (\r\n    <Router>\r\n        <Switch>\r\n            <Route exact path=\"/authentification\" component={AuthPage}/>\r\n            <PrivateRoute path='/' component={Home} />\r\n        </Switch>\r\n    </Router>\r\n  );\r\n}\r\n","import React, {useReducer} from 'react';\nimport './App.css';\nimport Routes from './components/routing.jsx'\n\n\nexport const CnxContext = React.createContext();\n\n\nconst initialState = localStorage.getItem('token');\nconst reducer = (state, action) => {\n    switch (action) {\n        case 'connect': return true;\n        case 'disconnect':\n            localStorage.removeItem('token');\n            return false;\n        default: throw new Error('Unexpected action');\n  }\n};\n\n\nfunction App() {\n  const [conn, dispatch] = useReducer(reducer, initialState);\n  return (\n    <div>\n        <CnxContext.Provider value={{ conn, dispatch }}>\n            <Routes />\n        </CnxContext.Provider>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}