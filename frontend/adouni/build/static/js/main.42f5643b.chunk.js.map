{"version":3,"sources":["components/auth_page.jsx","components/routing.jsx","App.js","serviceWorker.js","index.js"],"names":["AuthPage","props","useState","connected","setconnection","codepass","setCodepass","useEffect","history","push","className","onSubmit","event","preventDefault","axios","post","then","res","status","localStorage","setItem","data","token","type","onChange","target","value","PrivateRoute","Component","component","rest","getItem","render","to","Routes","exact","path","Home","onClick","removeItem","App","document","title","Boolean","window","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sTA0CeA,MArCf,SAAkBC,GAAQ,IAAD,EACcC,oBAAS,GADvB,mBACdC,EADc,KACHC,EADG,OAEWF,mBAAS,IAFpB,mBAEdG,EAFc,KAEJC,EAFI,KA2BvB,OAvBEC,qBAAU,WACFJ,GACAF,EAAMO,QAAQC,KAAK,QAsB3B,yBAAKC,UAAU,iBACX,0BAAMC,SAnBZ,SAAmBC,GACfA,EAAMC,iBAENC,IAAMC,KAAK,qCAAsC,CAAC,KAAQV,IACvDW,MAAK,SAAAC,GACiB,MAAfA,EAAIC,SACJC,aAAaC,QAAQ,QAASH,EAAII,KAAKC,OACvClB,EAAca,EAAII,KAAKC,aAY/B,gCACiC,2BAAOC,KAAK,OAAOC,SAP1D,SAAoBZ,GAChBN,EAAYM,EAAMa,OAAOC,UAOnB,2BAAOH,KAAK,cCzBlBI,EAAe,SAAC,GAAqC,IAAzBC,EAAwB,EAAnCC,UAAyBC,EAAU,6BAClDR,EAAQH,aAAaY,QAAQ,SACjC,OACI,kBAAC,IAAD,iBAAWD,EAAX,CAAiBE,OAAQ,SAAA/B,GAAK,OACf,MAATqB,EACA,kBAACM,EAAc3B,GACf,kBAAC,IAAD,CAAUgC,GAAG,2BAKZ,SAASC,IACtB,OACE,kBAAC,IAAD,KACI,6BACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,oBAAoBP,UAAW7B,IACjD,kBAAC,EAAD,CAAcoC,KAAK,IAAIP,UAAWQ,OAOlD,SAASA,EAAKpC,GAKZ,OACI,yBAAKS,UAAU,iBACb,oCACE,4BAAQ4B,QAPG,WACfnB,aAAaoB,WAAW,SACxBtC,EAAMO,QAAQC,KAAK,OAKf,eC7BK+B,MATf,WAEE,OADAC,SAASC,MAAQ,iBAEf,6BACI,kBAACR,EAAD,QCGYS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAShB,OACP,kBAAC,IAAMiB,WAAP,KACE,kBAAC,EAAD,OAEFR,SAASS,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.42f5643b.chunk.js","sourcesContent":["import React,  {useState, useEffect} from 'react';\r\nimport './style/debug.css';\r\nimport axios from 'axios';\r\n\r\n\r\nfunction AuthPage(props) {\r\n    const [connected, setconnection] = useState(false);\r\n    const [codepass, setCodepass] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        if (connected){\r\n            props.history.push('/');\r\n        }\r\n    });\r\n\r\n  function checkUser(event){\r\n      event.preventDefault();\r\n\r\n      axios.post('http://localhost:8000/user/ptoken/', {\"code\": codepass})\r\n        .then(res => {\r\n            if (res.status === 200){\r\n                localStorage.setItem('token', res.data.token);\r\n                setconnection(res.data.token);\r\n            }\r\n              }\r\n        )\r\n  }\r\n\r\n  function updateCode(event){\r\n      setCodepass(event.target.value);\r\n  }\r\n\r\n  return (\r\n    <div className=\"debugbounding\">\r\n        <form onSubmit={checkUser}>\r\n            Veuillez entrez votre code : <input type='text' onChange={updateCode}/>\r\n            <input type='submit'/>\r\n        </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AuthPage;\r\n","import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect\r\n} from \"react-router-dom\";\r\nimport AuthPage from './auth_page.jsx';\r\nimport './style/debug.css';\r\n\r\n\r\nconst PrivateRoute = ({component: Component, ...rest}) => {\r\n    var token = localStorage.getItem('token');\r\n    return (\r\n        <Route {...rest} render={props => (\r\n              token != null?\r\n              <Component {...props} />\r\n            : <Redirect to=\"/authentification\" />\r\n        )} />\r\n    );\r\n};\r\n\r\nexport default function Routes() {\r\n  return (\r\n    <Router>\r\n        <div>\r\n            <Switch>\r\n                <Route exact path=\"/authentification\" component={AuthPage}/>\r\n                <PrivateRoute path='/' component={Home} />\r\n            </Switch>\r\n        </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nfunction Home(props) {\r\n  const disconnect = () => {\r\n      localStorage.removeItem('token');\r\n      props.history.push('/');\r\n  }\r\n  return (\r\n      <div className=\"debugbounding\">\r\n        <h2>Home</h2>\r\n          <button onClick={disconnect}>disconnect</button>\r\n      </div>\r\n  );\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Routes from './components/routing.jsx'\n\n\nfunction App() {\n  document.title = \"Houssem ADOUNI\"\n  return (\n    <div>\n        <Routes />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}